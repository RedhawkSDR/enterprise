<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>redhawk</groupId>
		<artifactId>redhawk-enterprise-integration</artifactId>
		<version>2.0.2-SNAPSHOT</version>
	</parent>
	<artifactId>redhawk-rest</artifactId>
	<packaging>bundle</packaging>
	<name>REDHAWK :: REST</name>
	<description>Java library for integrating using REST with REDHAWK</description>
	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>
	<dependencies>
		<!-- JACKSON Stuff -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-xml-provider</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<!-- SLF4J implementation will be provided by Jetty/Karaf -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api -->
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<version>2.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/io.swagger/swagger-annotations -->
		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-annotations</artifactId>
			<version>1.5.16</version>
		</dependency>
		<!-- CXF Stuff -->
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-core</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxrs</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-extension-providers</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		<!-- END CXF Stuff -->
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.core</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>redhawk</groupId>
			<artifactId>redhawk-driver</artifactId>
			<version>${project.version}</version>
		</dependency>
		<!-- Test Dependencies -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-client</artifactId>
			<version>${cxf.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>redhawk</groupId>
			<artifactId>redhawk-driver</artifactId>
			<type>test-jar</type>
			<version>${project.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
			<version>${jetty.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<version>${jetty.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>3.3.0</version>
				<extensions>true</extensions>
				<configuration>
					<instructions>
						<DynamicImport-Package>*</DynamicImport-Package>
					</instructions>
				</configuration>
			</plugin>
			<!-- Adding section to create a proper war -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>make-war</id>
						<phase>package</phase>
						<goals>
							<goal>war</goal>
						</goals>
						<configuration>
							<packagingExcludes>OSGI-INF/*</packagingExcludes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Make sure artifact is attached -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<id>attach-artifacts</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<file>${project.build.directory}/${project.artifactId}-${project.version}.war</file>
									<type>war</type>
								</artifact>
								<!-- TODO: apparently overriding the helper plugin screws default jar deployment of bundle -->
								<artifact>
									<file>${project.build.directory}/${project.artifactId}-${project.version}.jar</file>
									<type>jar</type>
								</artifact>								
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<!-- Adding profiles for documentation -->
	<profiles>
		<profile>
			<id>docs</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<!-- Awesome example: https://tech.homeaway.com/development/2016/06/02/generating-swagger-spec.html -->
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<encoding>UTF-8</encoding>
									<outputDirectory>${project.build.directory}/asciidoc</outputDirectory>
									<resources>
										<resource>
											<directory>src/main/asciidoc</directory>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.github.kongchen</groupId>
						<artifactId>swagger-maven-plugin</artifactId>
						<version>3.1.0</version>
						<configuration>
							<apiSources>
								<apiSource>
									<locations>redhawk.rest.endpoints</locations>
									<basePath>rest/redhawk</basePath>
									<schemes>http,https</schemes>
									<host>127.0.0.1</host>
									<info>
										<title>REDHAWK REST</title>
										<version>${project.version}</version>
									</info>
									<swaggerDirectory>${project.build.directory}/swagger</swaggerDirectory>
								</apiSource>
							</apiSources>
						</configuration>
						<executions>
							<execution>
								<phase>compile</phase><!-- This has to happen in compile if it doesn't 
									this plugin won't work -->
								<goals>
									<goal>generate</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>io.github.swagger2markup</groupId>
						<artifactId>swagger2markup-maven-plugin</artifactId>
						<version>1.2.0</version>
						<configuration>
							<swaggerInput>${project.build.directory}/swagger/swagger.json</swaggerInput>
							<outputDir>${project.build.directory}/asciidoc</outputDir>
							<config>
								<swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
							</config>
						</configuration>
						<executions>
							<execution>
								<phase>compile</phase>
								<goals>
									<goal>convertSwagger2markup</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- Build HTML and PDF example is here: https://github.com/Swagger2Markup/spring-swagger2markup-demo/blob/master/pom.xml -->
					<plugin>
						<groupId>org.asciidoctor</groupId>
						<artifactId>asciidoctor-maven-plugin</artifactId>
						<version>1.5.3</version>
						<!-- Include Asciidoctor PDF for pdf generation -->
						<dependencies>
							<dependency>
								<groupId>org.asciidoctor</groupId>
								<artifactId>asciidoctorj-pdf</artifactId>
								<version>1.5.0-alpha.11</version>
							</dependency>
						</dependencies>
						<!-- Configure generic document generation settings -->
						<configuration>
							<sourceDirectory>${project.build.directory}/asciidoc</sourceDirectory>
							<sourceDocumentName>index.adoc</sourceDocumentName>
							<attributes>
								<doctype>book</doctype>
								<toc>left</toc>
								<toclevels>3</toclevels>
								<numbered />
								<hardbreaks />
								<sectlinks />
								<sectanchors />
								<generated>${generated.asciidoc.directory}</generated>
							</attributes>
						</configuration>
						<!-- Since each execution can only handle one backend, run separate 
							executions for each desired output type -->
						<executions>
							<execution>
								<id>output-html</id>
								<phase>compile</phase>
								<goals>
									<goal>process-asciidoc</goal>
								</goals>
								<configuration>
									<backend>html5</backend>
									<outputDirectory>${project.build.directory}/docs/html</outputDirectory>
								</configuration>
							</execution>
							<execution>
								<id>output-pdf</id>
								<phase>compile</phase>
								<goals>
									<goal>process-asciidoc</goal>
								</goals>
								<configuration>
									<backend>pdf</backend>
									<outputDirectory>${project.build.directory}/docs/pdf</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
