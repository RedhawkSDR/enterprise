#GitLab CI File for REDHAWK Integration Asset
#Tutuorial on using GitLab CI: https://docs.gitlab.com/ce/ci/quick_start/README.html
#Docs on format of CI file: https://docs.gitlab.com/ce/ci/yaml/README.html
stages:
  - build
  - test
  - test-jacorb
  - deploy

variables:
  redhawk_version: '2.1-nightly'
  enterprise_version: '2.1.2'
  maven_command: bash -c "mvn -P CFDependencies clean install -B -U && mvn clean install site -P localIT -DfailIfNoTests=false -DdomainHost=redhawk_${dist}_${arch}_${CI_JOB_ID} -DtestProps=`pwd`/docker_test.properties"

.common: &common
  image: ${docker_registry}redbus/maven:3-jdk-8
  stage: build
  tags:
    - mvn-cache
  before_script:
    - mvn -P CFDependencies clean install -B -U
  after_script:
    - mkdir -p output
    - mkdir -p site/images
    - cp docs/target/asciidoc/html/index.html site/index.html #Docs artifacts
    - cp -r docs/target/asciidoc/html/images/* site/images/ #Make sure images are available for site
    - tar zcvf site.tar.gz site; cp site.tar.gz output/
    - cp docs/target/asciidoc/pdf/index.pdf output/REDHAWK_Enterprise_v$enterprise_version.pdf
    - cp docs/target/rpm/redhawk-enterprise-integration-docs/RPMS/noarch/*.rpm output/ #RPM for installing REDHAWK Java Tools Docs in KARAF
    - cp dist/target/redhawk-enterprise-integration.tar.gz output/ #Tar of full distribution
    - cp dist/target/rpm/redhawk-enterprise-integration-dist/RPMS/noarch/*.rpm output/ #RPM for distribution
    - cp demo/demo-dist/target/rpm/redhawk-enterprise-integration-demo-dist/RPMS/noarch/*.rpm output/ #RPM for deploying demos
    - cp demo/demo-dist/target/redhawk-enterprise-integration-demo-dist.tar.gz output/ #tar for deploying demos
    - tar zcvf output.tar.gz output/
  artifacts:
    name: $CI_JOB_NAME
    paths:
      - output/site.tar.gz
      - output/*.pdf
      - output/*.rpm
      - output.tar.gz
    expire_in: 3 days

.deploy-common: &deploy-common
  image: centos:7
  stage: deploy
  dependencies: []
  script:
  - if [ -n "$jenkins_url" ]; then
      curl --insecure -X POST $jenkins_url/job/$jenkins_job/buildWithParameters?pipeline_id=$CI_PIPELINE_ID --user $jenkins_user:$jenkins_api_token;
    fi

#Common commands for the compose jobs
#https://gitlab.com/gitlab-org/gitlab-ce/issues/19677 ayufan comment did the trick.
.compose-test-common: &compose-test-common |
  docker-compose pull
  docker-compose --project-name ${dist}_${arch}_${CI_JOB_ID} up --force-recreate -d redhawk
  docker-compose --project-name ${dist}_${arch}_${CI_JOB_ID} exec -T redhawk yum install -y rh.FmRdsSimulator #TODO: This line shouldn't be necessary
  docker cp redhawk-driver/src/test/resources/node/SimulatorNode redhawk_${dist}_${arch}_${CI_JOB_ID}:/var/redhawk/sdr/dev/nodes/ # Deploy devMgr
  docker-compose --project-name ${dist}_${arch}_${CI_JOB_ID} exec redhawk nodeBooter -d /var/redhawk/sdr/dev/nodes/SimulatorNode/DeviceManager.dcd.xml 2>&1 & #Start DevMgr
  docker-compose --project-name ${dist}_${arch}_${CI_JOB_ID} exec -T redhawk mkdir -p /usr/local/redhawk/workspace #Make dir for deploying components
  docker cp demo/camel-event-channel/src/main/resources/EventSpitter redhawk_${dist}_${arch}_${CI_JOB_ID}:/usr/local/redhawk/workspace #Copy Event Spitter component into workspace
  docker cp redhawk-driver/src/test/resources/components/MessageProducer redhawk_${dist}_${arch}_${CI_JOB_ID}:/usr/local/redhawk/workspace #Copy Message Producer component into workspace
  docker-compose --project-name ${dist}_${arch}_${CI_JOB_ID} exec -T redhawk bash -c "cd /usr/local/redhawk/workspace/EventSpitter; ./build.sh install" #Install EventSpitter component
  docker-compose --project-name ${dist}_${arch}_${CI_JOB_ID} exec -T redhawk bash -c "java -version" #Debug
  docker-compose --project-name ${dist}_${arch}_${CI_JOB_ID} exec -T redhawk bash -c "cd /usr/local/redhawk/workspace/MessageProducer; ./build.sh install" #Install EventSpitter component
  docker-compose --project-name ${dist}_${arch}_${CI_JOB_ID} exec -T redhawk bash -c "nameclt list REDHAWK_DEV" #Debug
  docker-compose --project-name ${dist}_${arch}_${CI_JOB_ID} up --exit-code-from rei

.cleanup-compose: &cleanup-compose |
  docker-compose --project-name ${dist}_${arch}_${CI_JOB_ID} down

#TODO: You'll always need to do this make this common...
.failsafe-reports: &failsafe-reports |
  find */target/failsafe-reports -name 'TEST*.xml' | tar cvf $CI_PROJECT_DIR/output.tar --files-from -

.site-report: &site-report |
  find */target -name "*.exec" | tar -cvf jacoco-exec.tar.gz --files-from -
  find */target/classes | tar -cvf jacoco-classes.tar --files-from -
  find redhawk-*/src/main/java | tar -cvf jacoco-sources.tar --files-from -
  tar -C docs/target -czvf site.tar.gz site

.compose-test-artifacts: &compose-test-artifacts
  artifacts:
    name: $CI_JOB_NAME
    paths:
      - output.tar
      - jacoco-exec.tar.gz
      - jacoco-classes.tar
      - jacoco-sources.tar
      - site.tar.gz
    expire_in: 3 days

#General command for running the integration tests
#.general-it-command: &general-it-command
#  variables:
#    - maven_command: bash -c "mvn -P CFDependencies clean install -B -U && mvn clean install site -P localIT -DfailIfNoTests=false -DdomainHost=redhawk_${dist}_${arch}_${CI_JOB_ID} -DtestProps=`pwd`/docker_test.properties"

build:
  <<: *common
  script:
    - mvn -Djava.io.tmpdir=./ deploy -P docs,jaxb-generation,default -B -U -Drelease=0.$CI_PIPELINE_ID
  only:
    - branches

build-release:
  <<: *common
  script:
    - mvn -Djava.io.tmpdir=./ clean install -P docs,jaxb-generation,default -B -U
  only:
    - tags

test-install:
  image: centos:7
  stage: test
  script:
    - yum install -y `find output -name '*.rpm'`

test-el7-x86_64:
  <<: *compose-test-artifacts
  script:
    - *compose-test-common
    - *failsafe-reports
    - *site-report
  after_script:
    - *cleanup-compose
  image: ${docker_registry}utils/docker-compose:latest
  stage: test
  tags:
    - mvn-cache
  dependencies: []
  variables:
    dist: el7
    arch: x86_64

test-el6-x86_64:
  <<: *compose-test-artifacts
  script:
    - *compose-test-common
    - *failsafe-reports
    - *site-report
  after_script:
    - *cleanup-compose
  image: ${docker_registry}utils/docker-compose:latest
  stage: test
  tags:
    - mvn-cache
  dependencies: []
  variables:
    dist: el6
    arch: x86_64

test-el6-i386:
  <<: *compose-test-artifacts
  script:
    - *compose-test-common
    - *failsafe-reports
    - *site-report
  after_script:
    - *cleanup-compose
  image: ${docker_registry}utils/docker-compose:latest
  stage: test
  tags:
    - mvn-cache
  dependencies: []
  variables:
    dist: el6
    arch: i686

#Test Driver Against Jacorb
test-jacorb-el7_x86_64:
  script:
    - *compose-test-common
  image: ${docker_registry}utils/docker-compose:latest
  stage: test-jacorb
  tags:
    - mvn-cache
  after_script:
    - *cleanup-compose
  dependencies: []
  variables:
    dist: el7
    arch: x86_64
    maven_command: bash -c "mvn -P CFDependencies clean install -B -U && mvn -pl redhawk-driver clean install site -P localIT -Djacorb=true -DfailIfNoTests=false -DdomainHost=redhawk_${dist}_${arch}_${CI_JOB_ID} -DtestProps=`pwd`/docker_test.properties"

test-jacorb-el6_x86_64:
  script:
    - *compose-test-common
  image: ${docker_registry}utils/docker-compose:latest
  stage: test-jacorb
  tags:
    - mvn-cache
  after_script:
    - *cleanup-compose
  dependencies: []
  variables:
    dist: el6
    arch: x86_64
    maven_command: bash -c "mvn -P CFDependencies clean install -B -U && mvn -pl redhawk-driver clean install site -P localIT -Djacorb=true -DfailIfNoTests=false -DdomainHost=redhawk_${dist}_${arch}_${CI_JOB_ID} -DtestProps=`pwd`/docker_test.properties"

test-jacorb-el6_i386:
  script:
    - *compose-test-common
  image: ${docker_registry}utils/docker-compose:latest
  stage: test-jacorb
  tags:
    - mvn-cache
  after_script:
    - *cleanup-compose
  dependencies: []
  variables:
    dist: el6
    arch: i686
    maven_command: bash -c "mvn -P CFDependencies clean install -B -U && mvn -pl redhawk-driver clean install site -P localIT -Djacorb=true -DfailIfNoTests=false -DdomainHost=redhawk_${dist}_${arch}_${CI_JOB_ID} -DtestProps=`pwd`/docker_test.properties"

#Trigger a Jenkins job to aggregate artifacts there
deploy:
  variables:
    jenkins_job: $CI_PROJECT_NAMESPACE/job/$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME
  <<: *deploy-common
  only:
    - branches

deploy-release:
  variables:
    jenkins_job: 2.1.1/job/$CI_PROJECT_NAME-$enterprise_version
  <<: *deploy-common
  only:
    - tags

pages:
  stage: deploy
  script:
    - mkdir .public
    - if [ -f output/site.tar.gz ]; then echo "Found site.tar.gz"; cp output/site.tar.gz .; tar -xvf site.tar.gz; mv site/* .public; fi
    - rm -rf site
    - mv .public public
  artifacts:
    paths:
    - public
