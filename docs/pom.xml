<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>redhawk</groupId>
		<artifactId>redhawk-enterprise-integration</artifactId>
		<version>2.1.2</version>
	</parent>
	<artifactId>redhawk-enterprise-integration-docs</artifactId>
	<name>REDHAWK :: ENTERPRISE INTEGRATION :: DOCUMENTATION</name>
	<packaging>war</packaging>
	<properties>
		<docs.directory>${runtime.basedir}/docs</docs.directory>
		<timestamp>${maven.build.timestamp}</timestamp>
		<maven.build.timestamp.format>MM-dd-yyyy</maven.build.timestamp.format>
	</properties>
	<profiles>
		<profile>
			<id>localIT</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<dependencies>
				<dependency>
					<groupId>${project.parent.groupId}</groupId>
					<artifactId>redhawk-driver</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>${project.parent.groupId}</groupId>
					<artifactId>redhawk-rest</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>${project.parent.groupId}</groupId>
					<artifactId>redhawk-websocket</artifactId>
					<version>${project.version}</version>
				</dependency>
				<dependency>
					<groupId>${project.parent.groupId}</groupId>
					<artifactId>camel-redhawk</artifactId>
					<version>${project.version}</version>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.19.1</version>
						<configuration>
							<!-- Jacoco prepare-agent builds some command-line params without -->
							<!-- which jacoco will not instrument. Hence it is important to add -->
							<!-- those command-line params here (${argLine} holds those params) -->
							<argLine>${argLine} -Xms256m -Xmx2048m</argLine>
							<forkCount>1</forkCount>
							<runOrder>random</runOrder>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<configuration>
							<excludes>
								<!-- Excluding generated classes from xsd -->
								<exclude>redhawk/driver/xml/**</exclude>
								<!-- Excluding jsr356 classes. This is good code to have still because 
									we should look into implementing jsr356 so the websocket is more generic 
									and not jetty based. -->
								<exclude>redhawk/driver/xml/**</exclude>
							</excludes>
						</configuration>
						<executions>
							<execution>
								<id>report-aggregate</id>
								<phase>verify</phase>
								<goals>
									<goal>report-aggregate</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<reporting>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-project-info-reports-plugin</artifactId>
						<version>2.6</version>
						<reportSets>
							<reportSet>
								<reports><!-- select reports -->
									<report>index</report>
								</reports>
							</reportSet>
						</reportSets>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-report-plugin</artifactId>
						<version>2.20</version>
						<configuration>
							<reportsDirectories>
								<reportsDirectory>${project.parent.basedir}/redhawk-driver/target/surefire-reports</reportsDirectory>
								<reportsDirectory>${project.parent.basedir}/redhawk-driver/target/failsafe-reports</reportsDirectory>
								<reportsDirectory>${project.parent.basedir}/redhawk-rest/target/failsafe-reports</reportsDirectory>
								<reportsDirectory>${project.parent.basedir}/redhawk-websocket/target/surefire-reports</reportsDirectory>
								<reportsDirectory>${project.parent.basedir}/redhawk-websocket/target/failsafe-reports</reportsDirectory>
								<reportsDirectory>${project.parent.basedir}/redhawk-camel/target/failsafe-reports</reportsDirectory>
							</reportsDirectories>
						</configuration>
						<reportSets>
							<reportSet>
								<reports>
									<report>report-only</report>
								</reports>
							</reportSet>
						</reportSets>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jxr-plugin</artifactId>
						<version>2.1</version>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<configuration>
							<excludes>
								<!-- Excluding generated classes from xsd -->
								<exclude>redhawk/driver/xml/**</exclude>
								<!-- Excluding jsr356 classes. This is good code to have still because 
									we should look into implementing jsr356 so the websocket is more generic 
									and not jetty based. -->
								<exclude>redhawk/driver/xml/**</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</reporting>
		</profile>
		<profile>
			<id>docs</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<finalName>docs</finalName>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<version>3.1.0</version>
						<configuration>
							<webappDirectory>${project.build.directory}/asciidoc/html</webappDirectory>
						</configuration>
					</plugin>
					<!-- Using resources plugin to get everything in the propery directory 
						structure to build one user manual. This will also rely on projects ahead 
						of it that need to generate resources to atleast have gone through compile 
						phase. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<encoding>UTF-8</encoding>
									<outputDirectory>${project.build.directory}/asciidoc-workspace</outputDirectory>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>src/main/asciidoc</directory>
											<filtering>true</filtering><!-- Variable replacement -->
										</resource>
										<!-- Take the necessary adoc files from redhawk-driver -->
										<resource>
											<directory>${project.parent.basedir}/redhawk-driver/target/asciidoc-workspace</directory>
											<targetPath>driver</targetPath>
											<excludes>
												<exclude>index.adoc</exclude>
											</excludes>
										</resource>
										<!-- Take the necessary adoc files from redhawk-rest -->
										<resource>
											<directory>${project.parent.basedir}/redhawk-rest/target/asciidoc</directory>
											<targetPath>${project.build.directory}/asciidoc-workspace/rest</targetPath>
											<excludes>
												<exclude>index.adoc</exclude>
											</excludes>
										</resource>
										<!-- Take the necessary adoc files from redhawk-connector -->
										<resource>
											<directory>${project.parent.basedir}/redhawk-connector/src/main/asciidoc</directory>
											<targetPath>${project.build.directory}/asciidoc-workspace/connector</targetPath>
										</resource>
										<!-- Take the necessary adoc files from redhawk-websocket -->
										<resource>
											<directory>${project.parent.basedir}/redhawk-websocket/src/main/asciidoc</directory>
											<targetPath>websocket</targetPath>
										</resource>
										<!-- Take the necessary adoc files from the demo projects -->
										<resource>
											<directory>${project.parent.basedir}/demos/camel-event-channel</directory>
											<targetPath>demos</targetPath>
											<includes>
												<include>README.adoc</include>
											</includes>
										</resource>
										<resource>
											<directory>${project.parent.basedir}/demos/redhawk-webapp</directory>
											<targetPath>demos</targetPath>
											<includes>
												<include>redhawk-demo-webapp.adoc</include>
											</includes>
										</resource>
										<resource>
											<directory>${project.parent.basedir}/redhawk-camel/src/main/asciidoc</directory>
											<targetPath>camel</targetPath>
										</resource>
										<!-- Get web screenshot -->
										<resource>
											<directory>${project.parent.basedir}/demos/redhawk-webapp</directory>
											<targetPath>images</targetPath>
											<includes>
												<include>demo-webscreenshot.png</include>
											</includes>
										</resource>
										<!-- Get Metrics Docs -->
										<resource>
											<directory>${project.parent.basedir}/demos/redhawk-metrics</directory>
											<targetPath>images</targetPath>
											<includes>
												<include>redhawkMetricsScreenshot.png</include>
											</includes>
										</resource>
										<resource>
											<directory>${project.parent.basedir}/demos/redhawk-metrics/camel</directory>
											<targetPath>demos/camel</targetPath>
											<!-- 
											<includes>
												<include>redhawk-metrics.adoc</include>
											</includes>
											-->
										</resource>										
										<resource>
											<directory>${project.parent.basedir}/demos/redhawk-metrics</directory>
											<targetPath>demos</targetPath>
											<includes>
												<include>redhawk-metrics.adoc</include>
											</includes>
										</resource>										
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.asciidoctor</groupId>
						<artifactId>asciidoctor-maven-plugin</artifactId>
						<version>1.5.3</version>
						<dependencies>
							<dependency>
								<groupId>org.asciidoctor</groupId>
								<artifactId>asciidoctorj-pdf</artifactId>
								<version>1.5.0-alpha.11</version>
							</dependency>
							<!-- Comment this section to use the default jruby artifact provided 
								by the plugin -->
							<dependency>
								<groupId>org.jruby</groupId>
								<artifactId>jruby-complete</artifactId>
								<version>1.7.21</version>
							</dependency>
							<!-- Comment this section to use the default AsciidoctorJ artifact 
								provided by the plugin -->
							<dependency>
								<groupId>org.asciidoctor</groupId>
								<artifactId>asciidoctorj</artifactId>
								<version>1.5.4.1</version>
							</dependency>
						</dependencies>
						<!-- TODO: may move asciidoc stuff to default location -->
						<configuration>
							<sourceDirectory>${project.build.directory}/asciidoc-workspace</sourceDirectory>
							<sourceDocumentName>index.adoc</sourceDocumentName>
							<attributes>
								<project-version>${project.version}</project-version>
								<timestamp>${timestamp}</timestamp>
							</attributes>
						</configuration>
						<executions>
							<execution>
								<id>output-html</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>process-asciidoc</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/asciidoc/html</outputDirectory>
									<sourceHighlighter>coderay</sourceHighlighter>
									<backend>html5</backend>
									<doctype>book</doctype>
									<attributes>
										<toc>left</toc>
										<linkcss>false</linkcss>
									</attributes>
								</configuration>
							</execution>
							<execution>
								<id>generate-pdf-doc</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>process-asciidoc</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/asciidoc/pdf</outputDirectory>
									<backend>pdf</backend>
									<doctype>book</doctype>
									<!-- Since 1.5.0-alpha.9 PDF back-end can use 'rouge' as well as 
										'coderay' source highlighting -->
									<sourceHighlighter>coderay</sourceHighlighter>
									<attributes>
										<pdf-stylesdir>${project.basedir}/src/theme</pdf-stylesdir>
										<pdf-style>custom</pdf-style>
										<imagesdir>${project.build.directory}/asciidoc-workspace/images</imagesdir>
										<icons />
										<!-- To do: Look into adding icons for admonitions -->
										<pagenums />
										<toc />
										<toclevels>3</toclevels>
										<sectnums>true</sectnums>
										<sectnumlevels>3</sectnumlevels>
										<idprefix />
										<idseparator>-</idseparator>
									</attributes>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- RPM to install docs -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>rpm-maven-plugin</artifactId>
						<version>2.1.5</version>
						<extensions>true</extensions>
						<executions>
							<execution>
								<id>attached-rpm</id>
								<goals>
									<goal>attached-rpm</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<license>LGPLv3</license>
							<group>REDHAWK Enterprise Integration</group>
							<release>${release}</release>
							<defaultUsername>root</defaultUsername>
							<defaultGroupname>redhawk</defaultGroupname>
							<defaultFilemode>755</defaultFilemode>
							<mappings>
								<mapping>
									<directory>${docs.directory}</directory>
									<sources>
										<source>
											<location>${project.build.directory}/asciidoc/pdf/index.pdf</location>
										</source>
									</sources>
								</mapping>
								<mapping>
									<directory>${docs.directory}</directory>
									<sources>
										<source>
											<location>${project.build.directory}/docs.war</location>
										</source>
									</sources>
								</mapping>
							</mappings>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
